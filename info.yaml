--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - decoder.v
    - dpd.v
    - meiniki_pi.v
  top_module:  "meiniki_pi"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Meinhard Kissich"      # Your name
  title:        "Another Piece of Pi (π)"      # Project title
  language:     "Verilog"      # other examples include Verilog, Amaranth, VHDL, etc
  description:  "This design takes up the idea of James Ross (https://github.com/jar/tt02_freespeech), who submitted a circuit to Tiny Tapeout 02 that stores and outputs the first 1024 decimal digits of Pi (π) (including the decimal point) to a 7-segment display. In contrast to his approach, a densely packed decimal encoding is used to store the data. With this approach, 1400 digits (or more -- I'll try to optimize) can be stored and output within the design area of 150um x 170um. Like James, I'm also interested to hear about better strategies to fit more information into the design with synthesizable Verilog code."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      The circuit stores the data in hardware and outputs the digits of Pi to a 7-segment display.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      For simulation, please use the provided testbench and Makefile. It is important to run the genmux.py Python script first, as it generates the test vectors required by the Verilog testbench. For testing the physical chip, release the reset and compare the digits of Pi against a reference.

# A description of what the inputs do
  inputs:               
    - clk
    - reset
    - none
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - decimal LED

# The following fields are optional
  tag:          "pi, storage, verilog, 7-segment, display"      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "7-segment display"      # Describe any external hardware needed
  discord:      "Meinhard#5781"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
